{
 "_dirname": "{_root}docs/html",
 "_docs": [
  {
   "count": 4,
   "name": "cmd"
  },
  {
   "count": 3,
   "name": "cmd.plated"
  },
  {
   "count": 1,
   "name": "cmd.plated.build"
  },
  {
   "count": 1,
   "name": "cmd.plated.watch"
  },
  {
   "count": 12,
   "name": "html"
  },
  {
   "count": 5,
   "name": "html.plated"
  },
  {
   "count": 1,
   "name": "html.plated.chunks"
  },
  {
   "count": 1,
   "name": "html.plated.files"
  },
  {
   "count": 1,
   "name": "html.plated.macros"
  },
  {
   "count": 1,
   "name": "html.plated.operators"
  },
  {
   "count": 6,
   "name": "html.plated_plugin"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.blog"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.copy"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.docs"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.import"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.redirect"
  },
  {
   "count": 74,
   "name": "js"
  },
  {
   "count": 6,
   "name": "js.plated"
  },
  {
   "count": 1,
   "name": "js.plated.blog"
  },
  {
   "count": 1,
   "name": "js.plated.build"
  },
  {
   "count": 1,
   "name": "js.plated.plugin"
  },
  {
   "count": 1,
   "name": "js.plated.setup"
  },
  {
   "count": 1,
   "name": "js.plated.watch"
  },
  {
   "count": 20,
   "name": "js.plated_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.deepmerge"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_close_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_open_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_wrap_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.expand_tag"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.fill_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.format_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.lookup"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.lookup_in_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.markdown"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.merge_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.pop_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.prepare"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.push_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.remove_underscorechunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.replace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.replace_once"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.reset_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.set_namespace"
  },
  {
   "count": 26,
   "name": "js.plated_files"
  },
  {
   "count": 1,
   "name": "js.plated_files.base_files_to_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_files.build"
  },
  {
   "count": 1,
   "name": "js.plated_files.build_file"
  },
  {
   "count": 1,
   "name": "js.plated_files.empty_cache"
  },
  {
   "count": 1,
   "name": "js.plated_files.empty_folder"
  },
  {
   "count": 1,
   "name": "js.plated_files.exists"
  },
  {
   "count": 1,
   "name": "js.plated_files.file_to_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_fixup"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_is_basechunk"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_is_plated"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_to_dirname"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_to_output"
  },
  {
   "count": 1,
   "name": "js.plated_files.find_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_files.find_files"
  },
  {
   "count": 1,
   "name": "js.plated_files.joinpath"
  },
  {
   "count": 1,
   "name": "js.plated_files.lstat"
  },
  {
   "count": 1,
   "name": "js.plated_files.mkdir"
  },
  {
   "count": 1,
   "name": "js.plated_files.prepare_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_files.readdir"
  },
  {
   "count": 1,
   "name": "js.plated_files.set_source"
  },
  {
   "count": 1,
   "name": "js.plated_files.source_to_output"
  },
  {
   "count": 1,
   "name": "js.plated_files.stat"
  },
  {
   "count": 1,
   "name": "js.plated_files.trimpath"
  },
  {
   "count": 1,
   "name": "js.plated_files.watch"
  },
  {
   "count": 1,
   "name": "js.plated_files.write"
  },
  {
   "count": 5,
   "name": "js.plated_output"
  },
  {
   "count": 1,
   "name": "js.plated_output.remember"
  },
  {
   "count": 1,
   "name": "js.plated_output.remember_and_write"
  },
  {
   "count": 1,
   "name": "js.plated_output.write"
  },
  {
   "count": 1,
   "name": "js.plated_output.write_all"
  },
  {
   "count": 16,
   "name": "js.plated_plugin"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.blog"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.blog.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.blog.process_file"
  },
  {
   "count": 4,
   "name": "js.plated_plugin.copy"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_file"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_output"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.docs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.docs.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.docs.process_file"
  },
  {
   "count": 2,
   "name": "js.plated_plugin.import"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.import.process_file"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.redirect"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.redirect.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.redirect.process_file"
  }
 ],
 "_docs_json": {
  "dirname": "{_root}docs",
  "dirs": {
   "../../js": ""
  },
  "ignore": {
   "node_modules": true
  },
  "urlprefix": {
   "../js/": "https://github.com/xriss/plated/blob/master/js/"
  }
 },
 "_filename": "{_root}docs/html/index.html",
 "_flags": {
  "body": {
   "trim": "ends"
  },
  "css": {
   "same": "append"
  },
  "head": {
   "trim": "ends"
  },
  "html": {
   "trim": "ends"
  },
  "menuwrap": {
   "trim": "ends"
  },
  "menuwrap_link": {
   "trim": "ends"
  },
  "menuwrap_link1": {
   "trim": "ends"
  },
  "menuwrap_link2": {
   "trim": "ends"
  },
  "title": {
   "trim": "ends"
  }
 },
 "_list": [
  {
   "body": "",
   "count": 12,
   "name": "html"
  },
  {
   "body": "<p>Plated operates on a directory structure of files and simply copies the \nfiles it does not understand into the output. As such you could have an \nalmost 100% generic static site with only a few special files getting \nspecial treatment dependent on their name containing a ^. sequence of \ncharacters.</p>\n",
   "count": 5,
   "file": "../js/plated.js",
   "line": 37,
   "name": "html.plated",
   "url": "https://github.com/xriss/plated/blob/master/js/plated.js"
  },
  {
   "body": "<p>Chunk files are parsed one line at a time to break them into a number \nof named chunks, lines that begin with the special characters #^ \ntrigger special processing all other lines are simple assigned to the \ncurrent chunk. eg:</p>\n<pre><code>#^chunkname\nhere is some text\nthat will be assigned to chunkname\n</code></pre>\n<p>A chunk ends when we run out of file or we start another chunk.</p>\n<p>As well as the chunk name we can also add some flags to change how the \nchunk is processed. These flags are added by name=value pairs after the \nchunkname and separated by white space.</p>\n<pre><code>#^chunkname flag=value otherflag=othervalue\n</code></pre>\n<p>These values are intended to change how the chunk is processed here are \nthe ones that we currently support. Multiple flags can of course be \napplied to the same chunk.</p>\n<pre><code>#^chunkname trim=ends\n</code></pre>\n<p>This flag will cause all whitespace to be removed from the beginning \nand end of the chunk. Useful if you intend to include a chunk in a html \nattributes as newlines would would mess that up.</p>\n<pre><code>#^chunkname form=json\n</code></pre>\n<p>Parse the text as json, this allows for structured data or arrays to be \ndefined in chunks. This data can be referenced inside macro expansion \nusing the . operator to reference members. Most plugins have a json \nchunk containing their settings.</p>\n<pre><code>#^chunkname form=markdown\n</code></pre>\n<p>This text will be parsed as markdown and converted into html. Markdown \nis an easy way to create simple formated content for blog posts or just \npages in general. Note that the default format is just to leave the \ntext of the chunk unprocessed which means normal html tags.</p>\n<p>Chunk names that begin with an underscore are considered internal \nplated chunks ans some will be provided by the plated code for each \npage rendered. Here is a list of chunks that will be provided by the \nsystem.</p>\n<pre><code>#^chunkname same=replace\n</code></pre>\n<p>This alters how we replace chunks when they are declared twice, \nnormally the chunk in the lowest level will simply replace a chunk \ndeclared elsewhere. This is the default setting.</p>\n<pre><code>#^chunkname same=append\n</code></pre>\n<p>If we change to append mode then chunks lower down will be appended to \nthe higher up chunks. This is very useful for css chunks where we can \nappend rules as we cascade down and these rules will take precedence \nover the earlier rules due to the magic of css.</p>\n<pre><code>#^chunkname same=merge\n</code></pre>\n<p>This should only be used with a json chunk, it merges the data with its \nparent chunk so we can change or add values as we cascade down through \nthe directories similar to append but working as objects rather than \njust plan text. This is why it should only be used with json chunks.</p>\n<pre><code>#^_root\n</code></pre>\n<p>This will be set to a url that gets to the root of this website and \nshould be used in front of all urls to make sure that we can find the \nfiles we want. This can be passed in on the command line and / is a \ngood way to think of this value. The default is actually for plated to \nprovide a relative url such as ../../ that would get you to the root of \nthe site from the current page. You should be using _root as the prefix \nfor all urls when including css or js or images etc in a html file.</p>\n<pre><code>#^_site\n</code></pre>\n<p>Similar to root but intended to explicitly link to the root of the \nnamed site. This is intended for use in links that can never be \nrelative to the current url so must be full and explicit urls, eg in \nRSS feeds.</p>\n<pre><code>#^_sourcename\n</code></pre>\n<p>This will be set to the filename of the input source file that we are \ncurrently rendering.</p>\n<pre><code>#^_filename\n</code></pre>\n<p>This will be set to url of the file that we are currently rendering.</p>\n<pre><code>#^_dirname\n</code></pre>\n<p>This will be set to url of the directory containing the file that we \nare currently rendering.</p>\n<pre><code>#^_flags\n</code></pre>\n<p>This is an object containing flag data for the defined chunks, most \nchunks will not have any flags defined but if they are they can be \nfound in for example  _flags.chunkname.flagname which would hold the \nvalue of flagname for the given chunkname. This is really just for \ninternal processing and should not need to be referenced by the user.</p>\n<p>As well as the provided chunks there are some special names exist to \ntrigger plugin behaviour and need to be defined with the correct \nconfiguration data, for instance</p>\n<pre><code>#^_docs_json\n</code></pre>\n<p>Is the name of a chunk containing configuration data in json format \nthat enables the docs plugin to create pages such as the ones that you \nare currently reading. See html.plated.plugins for documentation on how \nto use them and what data must be provided. All you need to know is \nthat any chunk name that begins with an underscore belongs to the \nplated system itself and must only be created according to the \ndocumentation.</p>\n<p>As well as chunknames there are two other things we can do with special \ncharacters at the start of a line.</p>\n<pre><code>#^-this is a comment line\n</code></pre>\n<p>The comment line will simply be ignored, in case you wish to include \nsome comments about what a chunk will be used for.</p>\n<pre><code>#^=##\n</code></pre>\n<p>Allows the redefinition of the magic string, for the rest of the file, \nin this case, it would be ## instead of #^ but any string could be \nused. This is intended as an escape clause in case the magic string is \nundesirable in a certain file. It can also be changed on the command \nline when plated is invoked if you wish to change it globally.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 110,
   "name": "html.plated.chunks",
   "url": "https://github.com/xriss/plated/blob/master/js/plated.js"
  },
  {
   "body": "<p>A special string in the filename triggers chunk file processing, by \ndefault this is ^. but it can be changed to another character or string \nwhen plated is invoked. ^. seems to be a reasonably safe yet generally \nunused sequence of characters in file names.</p>\n<p>Chunk files are text files containing chunks of text assigned to \nsymbolic chunknames, these chunks can then be referenced by tags \ncontained in other chunks and expanded to build final output files. </p>\n<p>This is intended to be simple macro expansion only rather than a \ncomplex programming language. Any programming would take place in a \nplugin, for instance we include a blog plugin that helps build blog \nstyle websites on top of this base chunk system.</p>\n<p>There are two basic types of chunk files, directory scope and file \nscope. Directory scope chunk files contain chunks that can be \nreferenced by any other chunk file in their directory as well as any \nsub directories. Directory scope chunks declared inside a sub directory \nwill replace any chunks defined higher up the path, this allows us to \nadjust and group data using hierarchical directories.</p>\n<pre><code>^.html\n^.css\n^.md\n^.what.ever.you.like\n</code></pre>\n<p>Are all examples of directory scoped chunk files, they do not create \nany output files themselves but are parsed to provide directory scope \nchunks which can be used in other chunk files. It does not matter what \nextension is used, primarily it is intended to be used as a clue to \neditors to provide appropriate language highlighting. By convention css \nchunks would be placed inside ^.css and html chunks inside ^.html but \nthis is in no way enforced or necessary for plated to work.\n<br/>\n<br/></p>\n<pre><code>index.^.html\nlayout.^.css\nhacks.^.js\n</code></pre>\n<p>Are all examples of file scoped chunk files. Each one will create a \nfile in the output directory with the same path but the name altered \nslightly to remove ^. from it. For example index.^.html becomes \nindex.html</p>\n<p>The extension used selects the chunk name that will be rendered into \nthe output file. So index.^.html will render the html chunk into the \noutput file and layout.^.css will render the css chunk.</p>\n<p>Usually pages in a directory will share the same layout, so a html \nchunk will be declared at the directory level with the file just adding \na content chunk to be rendered inside this page structure. The \ncascading chunk system means you are free to alter this in sub \ndirectories but often pages have a lot in common so keeping a bunch of \ngeneric layout chunks in the root with sub directories just picking \nfrom them works perfectly. The idea is to provide data organisational \ntools but not to dictate the use.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 48,
   "name": "html.plated.files",
   "url": "https://github.com/xriss/plated/blob/master/js/plated.js"
  },
  {
   "body": "<p>Once we have some chunks defined we need to provide a way of refering to them \ninside other chunks as a macro expansion.</p>\n<pre><code>#^chunkname trim=ends\nI am expanded\n#^mainchunk\nExpand the {chunkname} to its contents.\n</code></pre>\n<p>If the above mainchunk was rendered then {chunkname} would be replace \nwith the contents of the chunk that was defined as #^chunkname this \nmacro expansion is recursive so you can include chunks within chunks \nwithin chunks. Combined with the cascading chunks this provides a huge \namount of flexibility without any additional programming logic. Similar \nto {{moustache}} templates but with slightly less logic and a bit more \nrecursion.</p>\n<p>If {chunkname} does not exist then the text will be left untouched as \n{chunkname} also there must be no white space in this macro expansion. \nso { chunkname } will never expand to anything.</p>\n<p>This may sound dangerous but we are able to get away with {} even \ninside C like languages that contain {} all over the place. If this \nscares you then you are free to redefine {} to {{}} when invoking \nplated but I assure you it is not necessary.</p>\n<pre><code>{jsonchunk.member}\n</code></pre>\n<p>When using a json chunk a . can be used to pull out a value from the object</p>\n<pre><code>{jsonarray.0.name}\n</code></pre>\n<p>If it is an array then the first item could be picked out with a number \nand then its member.</p>\n<pre><code>{jsonarray.-1.name}\n</code></pre>\n<p>Negative numbers are allowed in which case it counts backwards from the \nend, in this case the last name of the last object in the array would \nbe used.</p>\n<p>Finally a json chunk may have another chunk applied as a layout.</p>\n<pre><code>{jsonchunk:plate}\n</code></pre>\n<p>In this case plate is a chunk name that renders with {_it} being \nsynonymous with {jsonchunk} This is similar to calling a macro with a \nnumber of values.</p>\n<pre><code>{jsonarray:plate}\n</code></pre>\n<p>If a template is applied to an array then it is applied repeatedly to \neach item in that array. This allows for simple formatting of json data \nheld within an array. The loop happens auto-magically with {_it} \nexpanding to a different value each time.</p>\n<p>All of these templating expansions are intended for use by plugins \nwhich provide arrays or objects of data for you to display.</p>\n<p>If a plate is applied to empty data then the empty string is returned. \nEg no expansion happens, this can help with layout logic removing some \nchunks and showing others depending on their existence.</p>\n<p>Finally because we also need to be able to talk about these macros here \nwithout them accidently expanding then we have a simple way to escape \nthem.</p>\n<pre><code>{[}{chunkname}{]}\n</code></pre>\n<p>No matter how valid the chunkname is it will not expand because it is \ncontained within the comment tags {[}{]} these tags will be removed \nafter the text is rendered.</p>\n<pre><code>{[[}{chunkname}{]]}\n</code></pre>\n<p>If multiple [ are used instead of one then it allows one level macro \nreplacement per extra [ so we can control expansion this way. In the \nabove example {chunkname} will expand once but any macros within that \nchunk will stay untouched. A tad complex but escape syntax is always a \npain.</p>\n<p>Due to the way this expands you must be careful to balance any use of \n{[}{]} within this chunk so as not to accidentally close the tag \nprematurely. This documentation for instance is designed to be used \ninside such a chunk so all square brackets inside {} have been \ncarefully balanced to stop anything from going wrong.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 250,
   "name": "html.plated.macros",
   "url": "https://github.com/xriss/plated/blob/master/js/plated.js"
  },
  {
   "body": "<p>As well as chunknames we can also combine some logic operators to \ncontrol how macros expand. This is mostly of use with json chunks where \nyou wish to make a choice between a number of possibilities. For instance</p>\n<pre><code>{obj.count==1&amp;&amp;obj:showit||obj:hideit}\n</code></pre>\n<p>The above is an example of a value?one:two style logic test. First \nobj.count is compared to the value 1 this will work if it is a string \nor a number due to the loose typing used. If true then obj will be \nrendered with the template chunk showit if false then instead obj will \nbe rendered with the template chunk hideit. You can guess what these \ntwo templates are intended to do.</p>\n<p>The operators are evaluated left to right with no precedence and are C \nlike, hence == rather than just a single = sign. Here are all the \npossible operators that can be used.</p>\n<pre><code>{a&lt;b}\n    returns true if a is less than b\n{a&lt;=b}\n    returns true if a is less than or equal to b\n{a&gt;b}\n    returns true if a is more than b\n{a&gt;=b}\n    returns true if a is more than or equal to b\n{a==b}\n    returns true if a is equal to b\n{a&amp;&amp;b}\n    a and b returns b if a is true else returns a\n{a||b}\n    a or b returns b if a is false else returns a\n{a||}\n    returns a if it exists else return an empty string\n</code></pre>\n<p>The last one is useful for making macros invisible if they refer to \nempty data. Normally macros remain in the output if they are invalid. \nSo {a} on its own would either expand to something else or remain as \n{a} in the output. {a||} is just using the || operator to make it go \naway if empty.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 343,
   "name": "html.plated.operators",
   "url": "https://github.com/xriss/plated/blob/master/js/plated.js"
  },
  {
   "body": "",
   "count": 6,
   "name": "html.plated_plugin"
  },
  {
   "body": "<pre><code>#^_blog_json\n{\n    posts_per_page:5,\n    posts_per_feed:20,\n    url=&quot;http://base.site/url/&quot;,\n    feed={\n        title=&quot;Feed Title&quot;,\n    }\n}\n</code></pre>\n<p>A chunk of this name must be created in a directory scope file for this \nplugin to parse it. posts_per_page is the number of posts per page, we \nwill create as many pages as we need.</p>\n<p>posts_per_feed specifys the number of posts to publish in the feed.json \nfile. Which will be published using any data suplied in feed which can \ncontain any valid jsonfeed values. The base url must also be suplied \nsince feeds are expected to be copied to other domains. This url is \nintentionally seperate from _root as it must be explictly set and we \ncan not get away with relative paths here.</p>\n<p>Every directory within this blog directory will now be treated as a blogpost.</p>\n<p>See source/blog for an example of this all fits together. Inside each \nof these directories we look for.</p>\n<pre><code>#^_blog_post_json\n{\n    &quot;title&quot;:&quot;my title&quot;,\n    &quot;author&quot;:&quot;my name&quot;,\n    tags=[&quot;tag1&quot;,&quot;tag2&quot;],\n    feed={\n        atatchments=[{url=&quot;http://domain.full/thing.mp3&quot;,mimie_type=&quot;mime/type&quot;}],\n    }\n}\n</code></pre>\n<p>Which contains metadata about the blog post, the feed object can \ncontain any valid jsonfeed settings, by we try and set useful defaults \nfrom the rest of the metadata. All of these values can also be used in \nyour templates to render the blog posts.</p>\n<pre><code>#^_blog_post_body form=markdown\nThis is my blog post body.\n</code></pre>\n<p>Our blog body is to be found in this chunk name, probably best to use \nmarkdown as it makes writing blog posts easier.</p>\n<p>When it comes to generating the pages then the following chunks should \nbe setup in base directory.</p>\n<pre><code>#^_blog_page_body\nThis is a page of blog posts, eg the front page.\n</code></pre>\n<p>Within this chunk we provide _blog_page_older as the url of an older \npage and _blog_page_newer as the url of a newer page. If there is no \nnewer or older page then this will be empty. _list will contain an \narray of blog posts that we intend to display in this page. It will be \nat least one post and no more than the posts_per_page setting.</p>\n<pre><code>#^_blog_post_body\nThis is a single blog post, when viewed on its own page.\n</code></pre>\n<p>Within this chunk we provide _blog_post_older as the url of an older \npage and _blog_post_newer as the url of a newer page. If there is no \nnewer or older page then this will be empty. _blog_post_body will \ncontain the _blog_post_body as defined in the blog post directory.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_blog.js",
   "line": 20,
   "name": "html.plated_plugin.blog",
   "url": "https://github.com/xriss/plated/blob/master/js/plated_plugin_blog.js"
  },
  {
   "body": "<pre><code>#^_copy_json\n{\n    include:[\n        &quot;&quot;,\n    ],\n    exclude:[\n        &quot;fra&quot;,\n        &quot;spa&quot;,\n    ],\n}\n</code></pre>\n<p>A chunk of this name must be created in a directory scope file for this \nplugin to parse it. include is a list of prefixes to include and \nexclude is a list of prefixes within the include to exclude.</p>\n<p>The above configuration is assumed to be within a file fra/^.index and \nspa/^.index so it would include all chunkfiles from root but exclude \nfiles in fra or spa, ie itself. This way we can have a default english \nsite and a spanish translation under spa/ or french under fra/</p>\n<p>The files are copied into the current directory without the prefix used \nin include.</p>\n<p>An example can be found in test-source/006-copy</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_copy.js",
   "line": 30,
   "name": "html.plated_plugin.copy",
   "url": "https://github.com/xriss/plated/blob/master/js/plated_plugin_copy.js"
  },
  {
   "body": "<pre><code>#^_docs_json\n{\n    ignore:{\n        &quot;node_modules&quot;:true,\n    },\n    dirs:{\n        &quot;../js&quot;:&quot;.js&quot;,\n    },\n}\n</code></pre>\n<p>A chunk of this name must be created in a directory scope file for this \nplugin to parse it. We should ignore any paths containing the key \nstrings in the ignore object and will include (recursively) the keys in \nthe dirs object but only if the filename ends in the given string.</p>\n<p>So in the above case we will scan ../js for all .js files but ignore \neverything in node_modules. One should always ignore everything in \nnode_modules.</p>\n<p>These files are searched for special auto doc documentation syntax \nwhere any line that begins with --[#name.of.the.chunk will begin a \nspecial documentation chunk and ]] will end it. In both cases the \nstring must be at the start of a line.</p>\n<p>Each of these chunks will then be rendered into its own page as well as \nits parent pages, we use dot notation to describe this relationship. In \nthe case of name.of.the.chunk it will exist in name.of.the name.of name \nand the always present /</p>\n<p>Take a look at the source code that generates this site documentation \nin source/docs for an example of how this can be themed and presented.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_docs.js",
   "line": 20,
   "name": "html.plated_plugin.docs",
   "url": "https://github.com/xriss/plated/blob/master/js/plated_plugin_docs.js"
  },
  {
   "body": "<pre><code>#^importedchunk import=dir/dir\n...\n</code></pre>\n<p>The content if this chunk is unimportant as it will be replaced by the \nchunk referenced from another file via the import=dir flag. </p>\n",
   "count": 1,
   "file": "../js/plated_plugin_import.js",
   "line": 21,
   "name": "html.plated_plugin.import",
   "url": "https://github.com/xriss/plated/blob/master/js/plated_plugin_import.js"
  },
  {
   "body": "<pre><code>#^_redirect_json\n{\n    files:{\n        &quot;from/index.html&quot;:&quot;to/&quot;,\n        &quot;other/index.html&quot;:&quot;to/&quot;,\n    },\n}\n</code></pre>\n<p>A chunk of this name must be created in a directory scope file for this \nplugin to parse it. files is a map of redirections we require.</p>\n<p>Perform a redirect of files, using simple html javascript redirection, \nto another url. We mostly make use of the automatic use of an \nindex.html inside a given directory so in the case above ./from will \nget redirected to ./to note that these can contain one level of macro \nexpansion so {_root}dir is a reasonable redirection.</p>\n<p>Multiple redirections can be performed in a single json configuration \nbut be aware that we end up actually creating files to perform these \nredirections so be careful not to clash with other files.</p>\n<p>An example can be found in test-source/005-redirect</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_redirect.js",
   "line": 21,
   "name": "html.plated_plugin.redirect",
   "url": "https://github.com/xriss/plated/blob/master/js/plated_plugin_redirect.js"
  }
 ],
 "_output_chunkname": "html",
 "_output_filename": "docs/html/index.html",
 "_root": "../../",
 "_site": "{_root}",
 "_sourcename": "docs/html/index.html",
 "body": "<div class=\"default\">\n\t<div class=\"contents\">\n\t\t<div class=\"topics\">\n\t\t\t<a class=\"par\" href=\"{_docs_json.dirname}\"><span>/</span></a>\n\t\t\t{_docs:menuwrap}\n\t\t</div>\n\t</div>\n\t<div class=\"main\">\n\t\t{_list:wrap}\n\t</div>\n</div>\n",
 "content": "<div class=\"content\">{nav}{body}</div>\n",
 "css": "\n/*\n\n\tVariables:\n\t\n\t------------------------------------------------------------------\n\tThe bright highlight used for the logo and links on hover\n\t------------------------------------------------------------------\n\t\n\tbase \t\t\t- Blue\t\t\t\t|\tLogo\n\tbase_alt \t\t- Light blue\t\t|\tLink hover\n\t\n\t------------------------------------------------------------------\n\tBasic colours for background and fonts\n\t------------------------------------------------------------------\n\t\n\tbase_back\t\t- Off white\t\t\t|\tMain body background\n\tbase_back_alt \t- Dark white\t\t|\tDocs column background\n\tbase_back_code\t- Dark blue grey\t|\tCode background\n\tbase_link\t\t- Medium grey\t\t|\tLink\n\tbase_font\t\t- Dark grey\t\t\t|\tBody font\n\tbase_code\t\t- White\t\t\t\t|\tCode font\n\tbase_src\t\t- Light grey\t\t|\tSource link background\n\t\n\t------------------------------------------------------------------\n\tExtra bits\n\t------------------------------------------------------------------\n\t\n\twhite \t\t\t- White\t\t\t\t|\tNavigation bar\n\thr\t\t \t\t- Blue\t\t\t\t|\tHorizontal line\n\n*/\n\n:root {\n  --base:#1400ff;\n  --base_alt:#3F2FFF;\n  --base_back:#f7f4fd;\n  --base_back_alt:#efefef;\n  --base_back_code:#282a36;\n  --base_link:#666;\n  --base_font:#484848;\n  --base_code:#fff;\n  --base_src:#d8d8d8;\n  --white:#fff;\n  --hr:#1400ff;\n}\n\n\n/*\n\n\tReset & base css\n\t\n\tbody\t|\t100vh - Avoid the IE 10-11 `min-height` bug.\n\n*/\n\n*{box-sizing:border-box; -webkit-box-sizing:border-box; -moz-box-sizing:border-box; -o-box-sizing:border-box; -ms-box-sizing:border-box;}\n\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:top;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}\n\na,img\t\t{border:0; outline:none;}textarea:focus,input:focus{outline:0;}*:focus{outline:0;}\nbody, html\t{-webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; min-width:100%; min-height:100%; width:100%; height:100%; height:100vh; margin:0 auto;}\n\n\n/*\n\n\tMain styles for the entire site\n\t\n\ta\t\t|\tTransition css animations\n\n*/\n\nbody \t{background-color:var(--base_back); color:var(--base_font); display:flex; flex-direction:column; font-family:Arial, sans-serif; font-size:13px; line-height:18px; position:relative; padding-top:4em;}\n\na\t\t{-webkit-transition:all .2s ease-in-out; -moz-transition:all .2s ease-in-out; -o-transition:all .2s ease-in-out; -ms-transition:all .2s ease-in-out; transition:all .2s ease-in-out;}\n\na \t\t{color:var(--base_font); text-decoration:none;}\na:hover {color:var(--base); cursor:pointer;}\na img \t{border:none;}\n\nh1 \t\t{font-size:30px; margin-bottom:26px;}\nh1 a\t{font-weight:bold;}\nh2 \t\t{font-size:24px;}\nh3 \t\t{font-size:18px;}\nh4 \t\t{font-size:16px;}\nh5 \t\t{font-size:14px;}\nh6 \t\t{font-size:13px;}\n\nb\t\t{font-weight:bold;}\np \t\t{font-size:19px; line-height:31px; margin-bottom:16px;}\nstrong\t{font-weight:bold;}\n\n.line, hr\t\t\t{border-top:1px dashed var(--hr); margin-top:40px; margin-bottom:20px; position:relative;}\n\nblockquote \t\t\t{font-family:georgia,serif; font-style:italic; padding:13px 13px 21px 15px; margin-bottom:18px;}\nblockquote:before\t{color:#eee; content:\"\\201C\"; font-family:georgia,serif; font-size:40px; margin-left:-10px;}\nblockquote p \t\t{font-size:14px; font-style:italic; font-weight:300; line-height:18px; margin-bottom:0;}\n\ncode, pre \t\t\t{color:var(--base_code); font-family:monospace;}\ncode\t\t\t\t{background:var(--base_back_code);  border-radius:3px; -webkit-border-radius:3px; -moz-border-radius:3px; font-size:12px; padding:1px 3px;}\npre\t\t\t\t\t{background-color:var(--base_back_code); border-radius:6px; font-size:11px; line-height:16px; margin:32px 0 18px 0; padding:14px; white-space:pre-wrap; word-wrap:break-word; }\npre:first-of-type\t{margin-top:0;}\npre code \t\t\t{background:transparent; font-size:14px; line-height:26px; padding:0;}\nsup \t\t\t\t{font-size:0.83em; line-height:0; vertical-align:super;}\n\n\n/*\n\n\tWrappers:\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tcontent\t\t\t|\tFlex = *\n\tdefault \t\t|\tClean default div, used only in Docs body\n\tnav_wrap \t\t|\tNavigation bar for entire site\n\tright \t\t\t|\tClass for text-align right\n\n*/\n\n.content\t{flex:1 0 auto;}\n.default\t{margin:0 auto;}\n.nav_wrap\t{background-color:var(--white); left:0; padding:1.5em 3em; position:fixed; top:0; width:100%; z-index:100;}\n.right\t\t{text-align:right;}\n\n\n/*\n\n\tNavigation bar:\n\t\n\tThe main navigation bar is made up of a wrapper div that holds the\n\tmain logo link and an unordered list of all the other pages.\n\t\n\tnav\t\t \t\t|\tMain div for logo and links\n\tnav ul\t \t\t|\tListing of links\n\tnav a \t\t\t|\tLinks with padding\n\n*/\n\n.nav\t\t{align-items:center; display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; -moz-box-align:center; -ms-box-align:center; -webkit-box-align:center;}\n.nav ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:flex-end; width:100%;}\n.nav a\t\t{color:var(--base_link); font-size:1.5em; margin:0 1rem;}\n.nav a:hover{color:var(--base);}\n\n\n/*\t\n\n\tLogo:\n\t\n\t'Patua One' is only used here - @import found in ^.html\n\t\n\tlogo\t \t\t|\tSplash page logo\n\tlogo p\t \t\t|\tSplash page about div\n\tnav a.logo \t\t|\tLogo in navigation bar\n\t\n*/\n\n.logo\t\t{color:var(--base); font-family:'Patua One',georgia,serif;}\n.logo p\t\t{color:var(--base_font); font-size:5em; line-height:0.8em;}\n.nav a.logo {color:var(--base); display:block; font-size:1.8em;}\n\n\n/*\n\n\tInstall:\n\t\n\tInstallation instructions on the splash page\n\t\n\tinstall \t\t|\tMain wrapper\n\tinstall div\t\t|\tWrapper for installation divs\n\tinstall code\t|\tBigger fonts for code div\n\t\n*/\n\n.install \t\t\t\t\t{display:flex; justify-content:space-evenly; margin-top:2em; width:100%;}\n.install div\t\t\t\t{padding-left:5%; width:60%;}\n.install div:nth-of-type(1) {padding:0; width:40%;}\n.install.full div\t\t\t{width:100%;}\n.install code \t\t\t\t{font-size:1.6em;}\n\n\n/*\n\n\tBlog:\n\t\n\tblog_info \t\t|\tBlog author & date info\n\tblog_wrap \t\t|\tWrapper for a blog post\n\tblog_wrap a\t\t|\tFix long urls with these rules\n\tpaging_wrap\t\t|\tWrapper for paging links\n\t\n*/\n\n\n.blog_info\t\t{font-size:70%; position:absolute; right:10px; top:2.5em; background-color:#e7e1f5; padding:0 20px;}\n\n.blog_wrap\t\t{color:var(--base_font); font-family:sans-serif; font-size:20px; line-height:33px; margin:auto; padding:4em 0; position:relative; width:740px;}\n.blog_wrap h2\t{font-family:'Patua One',georgia,serif; font-size:2.5em; line-height:1em; padding-bottom:1em;}\n.blog_wrap a\t{overflow-wrap:break-word; word-wrap:break-word; word-break:break-word; -ms-hyphens:auto; -moz-hyphens:auto; -webkit-hyphens:auto; hyphens:auto;}\n.blog_wrap a \t{color:var(--base); text-decoration:none;}\n.blog_wrap a:hover {color:var(--base_alt); cursor:pointer;}\n\n.paging_wrap\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; margin-top:5em;}\n.paging_wrap a\t{font-size:80%; display:block;}\n\n\n/*\n\n\tFooter:\n\t\n\tSticky footer with flexbox\n\t\n\thttps://css-tricks.com/couple-takes-sticky-footer/\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tfooter\t \t\t|\tFlex = *\n\tfooter ul \t\t|\tFooter links\n\t\n*/\n\n.footer\t\t\t{flex-shrink:0; padding:2em 4em;}\n.footer ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; width:100%;}\n\n\n/*\n\n\tMedia queries\n\t\n\tmain\t\t\t|\tWrapper for documentation page\n\tcontents\t\t|\tWrapper for documentation table of contents\n\t\n*/\n\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\nonly screen and (-o-min-device-pixel-ratio: 3/2),\nonly screen and (min--moz-device-pixel-ratio: 1.5),\nonly screen and (min-device-pixel-ratio: 1.5) {\n\n\tbody\t\t\t{padding-top:7em;}\n\t.nav_wrap\t\t{padding:3em;}\n\t.nav\t\t\t{font-size:1.5em;}\n\t.blog_info\t\t{font-size:1em;}\n\t.blog_wrap h2\t{font-size:3em;}\n\tp \t\t\t\t{font-size:1.5em; line-height:1.5em; margin-bottom:1.5em;}\n\t.footer\t\t\t{font-size:1.5em;}\n\t.paging_wrap\t{font-size:1.5em;}\n\t\n\t.main\t\t\t{max-width:initial;}\n\t.contents\t\t{top:5.5em;}\n\n}\n",
 "foot": "<div class=\"footer\">\n\t<ul>\n\t\t<li>Hosted with Github pages</li>\n\t\t<li><a href=\"#\">^.^</a></li>\n\t\t<li><a href=\"https://github.com/xriss/plated/blob/master/LICENSE\">2018 MIT License</a></li>\n\t</ul>\n</div>\n",
 "head": "<title>{title}</title>\n<meta name=\"theme-color\" content=\"#2a3133\">\n<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n<style>\n{css}\n</style>",
 "html": "<html>\n\t<head>\n\t\t<title>{title}</title>\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n\t\t<link rel='stylesheet' href='{_docs_json.dirname}/docs.css' />\n\t</head>\n\t<body>{nav}{body}</body>\n</html>\n",
 "menuwrap": "{_it:menuwrap_link}",
 "menuwrap_link": "{_it.count>1&&_it:menuwrap_link2||}\n{_it.count==1&&_it:menuwrap_link1||}",
 "menuwrap_link1": "<a class=\"sub\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "menuwrap_link2": "<a class=\"par\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "nav": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">\n\t\t<a href=\"{_root}\" class=\"logo\">plated^</a>\n\t\t<ul>\n\t\t\t<li><a href=\"https://github.com/xriss/plated\">Github</a></li>\n\t\t\t<li><a href=\"{_root}blog\">Blog</a></li>\n\t\t\t<li><a href=\"{_root}docs\">Documentation</a></li>\n\t\t</ul>\n\t</div>\n</div>\n",
 "title": "Plated^ docs!",
 "wrap": "\n<div class=\"wrap\">\n<h1><a href=\"{_docs_json.dirname}/{_it.name}\">{_it.name}</a></h1>\n<div class=\"source\"><a href=\"{_it.url||}#L{_it.line||}\">{_it.url||}</a></div>\n<div>{[[}{_it.body}{]]}</div>\n</div>\n"
}