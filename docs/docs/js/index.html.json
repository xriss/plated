{
 "_dirname": "{_root}docs/js",
 "_docs": [
  {
   "count": 4,
   "name": "cmd"
  },
  {
   "count": 3,
   "name": "cmd.plated"
  },
  {
   "count": 1,
   "name": "cmd.plated.build"
  },
  {
   "count": 1,
   "name": "cmd.plated.watch"
  },
  {
   "count": 12,
   "name": "html"
  },
  {
   "count": 5,
   "name": "html.plated"
  },
  {
   "count": 1,
   "name": "html.plated.chunks"
  },
  {
   "count": 1,
   "name": "html.plated.files"
  },
  {
   "count": 1,
   "name": "html.plated.macros"
  },
  {
   "count": 1,
   "name": "html.plated.operators"
  },
  {
   "count": 6,
   "name": "html.plated_plugin"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.blog"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.copy"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.docs"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.import"
  },
  {
   "count": 1,
   "name": "html.plated_plugin.redirect"
  },
  {
   "count": 71,
   "name": "js"
  },
  {
   "count": 5,
   "name": "js.plated"
  },
  {
   "count": 1,
   "name": "js.plated.build"
  },
  {
   "count": 1,
   "name": "js.plated.plugin"
  },
  {
   "count": 1,
   "name": "js.plated.setup"
  },
  {
   "count": 1,
   "name": "js.plated.watch"
  },
  {
   "count": 19,
   "name": "js.plated_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.deepmerge"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_close_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_open_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.delimiter_wrap_str"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.expand_tag"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.fill_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.format_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.lookup"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.markdown"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.merge_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.pop_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.prepare"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.push_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.remove_underscorechunks"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.replace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.replace_once"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.reset_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_chunks.set_namespace"
  },
  {
   "count": 25,
   "name": "js.plated_files"
  },
  {
   "count": 1,
   "name": "js.plated_files.base_files_to_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_files.build"
  },
  {
   "count": 1,
   "name": "js.plated_files.build_file"
  },
  {
   "count": 1,
   "name": "js.plated_files.empty_cache"
  },
  {
   "count": 1,
   "name": "js.plated_files.empty_folder"
  },
  {
   "count": 1,
   "name": "js.plated_files.exists"
  },
  {
   "count": 1,
   "name": "js.plated_files.file_to_chunks"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_fixup"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_is_basechunk"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_is_plated"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_to_dirname"
  },
  {
   "count": 1,
   "name": "js.plated_files.filename_to_output"
  },
  {
   "count": 1,
   "name": "js.plated_files.find_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_files.find_files"
  },
  {
   "count": 1,
   "name": "js.plated_files.joinpath"
  },
  {
   "count": 1,
   "name": "js.plated_files.lstat"
  },
  {
   "count": 1,
   "name": "js.plated_files.mkdir"
  },
  {
   "count": 1,
   "name": "js.plated_files.prepare_namespace"
  },
  {
   "count": 1,
   "name": "js.plated_files.readdir"
  },
  {
   "count": 1,
   "name": "js.plated_files.source_to_output"
  },
  {
   "count": 1,
   "name": "js.plated_files.stat"
  },
  {
   "count": 1,
   "name": "js.plated_files.trimpath"
  },
  {
   "count": 1,
   "name": "js.plated_files.watch"
  },
  {
   "count": 1,
   "name": "js.plated_files.write"
  },
  {
   "count": 5,
   "name": "js.plated_output"
  },
  {
   "count": 1,
   "name": "js.plated_output.remember"
  },
  {
   "count": 1,
   "name": "js.plated_output.remember_and_write"
  },
  {
   "count": 1,
   "name": "js.plated_output.write"
  },
  {
   "count": 1,
   "name": "js.plated_output.write_all"
  },
  {
   "count": 16,
   "name": "js.plated_plugin"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.blog"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.blog.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.blog.process_file"
  },
  {
   "count": 4,
   "name": "js.plated_plugin.copy"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_file"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.copy.process_output"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.docs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.docs.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.docs.process_file"
  },
  {
   "count": 2,
   "name": "js.plated_plugin.import"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.import.process_file"
  },
  {
   "count": 3,
   "name": "js.plated_plugin.redirect"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.redirect.process_dirs"
  },
  {
   "count": 1,
   "name": "js.plated_plugin.redirect.process_file"
  }
 ],
 "_docs_json": {
  "dirname": "{_root}docs",
  "dirs": {
   "../../js": ""
  },
  "ignore": {
   "node_modules": true
  },
  "urlprefix": {
   "js/": "https://github.com/xriss/plated/blob/master/js/"
  }
 },
 "_filename": "{_root}docs/js/index.html",
 "_flags": {
  "body": {
   "trim": "ends"
  },
  "css": {
   "same": "append"
  },
  "head": {
   "trim": "ends"
  },
  "html": {
   "trim": "ends"
  },
  "menuwrap": {
   "trim": "ends"
  },
  "menuwrap_link": {
   "trim": "ends"
  },
  "menuwrap_link1": {
   "trim": "ends"
  },
  "menuwrap_link2": {
   "trim": "ends"
  },
  "title": {
   "trim": "ends"
  }
 },
 "_list": [
  {
   "body": "",
   "count": 71,
   "name": "js"
  },
  {
   "body": "<p>Plated is a static site generator that uses a cascading chunk system to \ndescribe the output pages.</p>\n<p>Since we are using node we are also able to dynamically build the pages \nin the browser, which is why we include json dumps of the chunk data. \nThis provides enough data to reconstruct pages client side.</p>\n<p>Included are a handful of plugins that do slightly more complicated \nthings to enable extra functionality such as page redirects or \ngenerating blogs.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated=require(&quot;./plated.js&quot;).create(opts,plated)</code></pre><p>opts is an object of options and plated is an optional input if \nprovided it will be modified and returned otherwise a new object will \nbe created and returned.</p>\n<p>We also load and setup this and all the builtin plugins so after \ncalling this we are good to go.</p>\n<p>In the future when we talk about plated and its available functions we \nare referring to the return from this create function.</p>\n<p>The opts is intended to be filled with command line options so take a \nlook at these for a full description of what can be passed in here.</p>\n",
   "count": 5,
   "file": "../js/plated.js",
   "line": 3,
   "name": "js.plated",
   "url": "../js/plated.js"
  },
  {
   "body": "<pre><code>plated.build()</code></pre><p>Build all the output files from the inputs.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 458,
   "name": "js.plated.build",
   "url": "../js/plated.js"
  },
  {
   "body": "<pre><code>plated.plugin(it)</code></pre><p>Register a plugin, each plugin can provide the following function hooks.</p>\n<pre><code>dirs = it.process_dirs( dirs )</code></pre><p>Adjust the registered dirs data and return it.</p>\n<pre><code>file = it.process_file( file )</code></pre><p>Adjust or react to the file data and return it.</p>\n<pre><code>it.process_output( chunks )</code></pre><p>Adjust a files chunks prior to writing it out, or, output extra data \nassociated with these chunks.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 430,
   "name": "js.plated.plugin",
   "url": "../js/plated.js"
  },
  {
   "body": "<pre><code>plated.setup(opts)</code></pre><p>Initialise plated and require the base plated modules: files, chunks \nand output.</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 409,
   "name": "js.plated.setup",
   "url": "../js/plated.js"
  },
  {
   "body": "<pre><code>plated.watch()</code></pre><p>Continuously build the output files from the inputs whenever one of the input files changes</p>\n",
   "count": 1,
   "file": "../js/plated.js",
   "line": 471,
   "name": "js.plated.watch",
   "url": "../js/plated.js"
  },
  {
   "body": "<p>Manage the chunks of text that are combined into a page.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_chunks = require(&quot;./plated_chunks.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturn value is made available in plated.chunks note that all of these \nmodules are bound together and operate as a group with shared data.</p>\n<p>In the future when we talk about this module and its available \nfunctions we are referring to the return value from this create \nfunction.</p>\n",
   "count": 19,
   "file": "../js/plated_chunks.js",
   "line": 3,
   "name": "js.plated_chunks",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>too = plated_chunks.deepmerge(frm,too,_flags)</code></pre><p>Merge the object, frm, into an object too. How values merge can be \nadjusted by _flags the same way _flags works in parsing chunks. \nsame=merge is honoured here so some chunks can be appended rather than \nreplace. We need to keep this separate as the act of merging will break \nhow such things work.</p>\n<p>This function is called recursively so as not to end up sharing values \nwith any inputs.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 414,
   "name": "js.plated_chunks.deepmerge",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>s = plated_chunks.delimiter_close_str()</code></pre><p>Return the last half of the opts.delimiter string.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 82,
   "name": "js.plated_chunks.delimiter_close_str",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>s = plated_chunks.delimiter_open_str()</code></pre><p>Return the first half of the opts.delimiter string.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 70,
   "name": "js.plated_chunks.delimiter_open_str",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>s = plated_chunks.delimiter_wrap_str(s)</code></pre><p>Return the given string wrapped in the opts.delimiter string.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 94,
   "name": "js.plated_chunks.delimiter_wrap_str",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>value = plated_chunks.expand_tag(v,dat,lastpass)</code></pre><p>Do all the magical things that enables a tag to expand, normally we \njust lookup the value inside dat but a few operators can be applied.</p>\n<p>Operators are applied from left to right so we have no precedence \nbesides this.</p>\n<p>If we fail to lookup a valid value then we return input string wrapped \nin delimiters, essentially any values we do not understand will come \nout of the process unscathed  exactly as they went in.</p>\n<p>There must be no white space inside {} or we will not process it.</p>\n<p>This combined is why we can safely use {} rather than {{}} and any accidental \nuse will survive.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 637,
   "name": "js.plated_chunks.expand_tag",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>chunks = plated_chunks.fill_chunks(str,chunks)</code></pre><p>break a string into chunks ( can merged with or replace other chunks ) \nso chunks can be a previously filled list of chunks that we will \ncombine any chunks we find in the string with.</p>\n<p>A chunk is defined by a line that begins with #^ this has been chosen \nso as not to be something that occurs by mistake in any language, but \ncan be altered either inside the chunk file or via the command line \nopts. Note that any future reference is referring to this default and \nwould work with any other string if this has been changed.</p>\n<p>A line that begins with #^=## would redefine this from one to the other \nfor the remainder of the file and can be changed globally by the option \nopt.hashchunk</p>\n<p>The first word after this would be the name of the chunk and can then \nbe followed by a number of optional flag arguments like flag=value we \nstore these flags in the chunks table using chunks._flags[name]=value \nthis includes trimming options and request for how chunks should be \nmerged.</p>\n<p>A comment begins with #^- and the rest of the line will be ignored.</p>\n<p>The flag same=append will cause future chunks of the same name to be \nappended to this chunk rather than replace it. This is useful for CSS \nchunks where we wish to bubble down css values into sub directories.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 108,
   "name": "js.plated_chunks.fill_chunks",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>chunks = plated_chunks.format_chunks(chunks)</code></pre><p>Process the chunks according to their flags, a chunk with trim=ends set \nwill have white space removed from its beginning and end.</p>\n<p>A chunk with form=json will be parsed as json rather than a string. It \ncan then be referenced inside chunks using chunk.member style lookups.</p>\n<p>A chunk with form=markdown will be processed as markdown and turned \ninto a html string.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 239,
   "name": "js.plated_chunks.format_chunks",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>chunks = plated_chunks.lookup(str,dat)</code></pre><p>lookup the string inside dat, the string can use dot notation such as \nparent.member to lookup a value inside an object.</p>\n<p>Numbers can also be used to reverence arrays such as array.0 or array.1 \nand negative indexes such as array.-1 can be used to fetch the last \nvalue from the array.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 500,
   "name": "js.plated_chunks.lookup",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>html = plated_chunks.markdown(str)</code></pre><p>Convert a markdown string to a html string. As a personal quirk We keep \nnewlines a little more eagerly than standard markdown allowing some \ncontrol over the spacing between your text.</p>\n<p>Markdown is hardly a standard thing, after all.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 844,
   "name": "js.plated_chunks.markdown",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>chunks = plated_chunks.merge_namespace(dat)</code></pre><p>Merge all of the namespaces together, along with the dat, then return \nthis new set of chunks for easy lookup it should be safe to modify the \noutput merged chunks without accidentally changing anything in the \nnamespace.</p>\n<p>This gives us a final chunks object that we can use to build the output \npage.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 472,
   "name": "js.plated_chunks.merge_namespace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>plated_chunks.pop_namespace(value)</code></pre><p>Remove last namespace from top of the stack.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 373,
   "name": "js.plated_chunks.pop_namespace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>array = plated_chunks.prepare(chunks)</code></pre><p>break a string on {data} ready to find the lookup values and do all the \ntemplating actions. This just gets us an array of string parts we can \neasily parse.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 288,
   "name": "js.plated_chunks.prepare",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>plated_chunks.push_namespace(value)</code></pre><p>Add this value into the namespaces, we check this namespace as well as \nthe current chunk data when filling in chunks.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 356,
   "name": "js.plated_chunks.push_namespace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>newchunks = plated_chunks.remove_underscorechunks(chunks)</code></pre><p>Remove any chunks that begin with &quot;_&quot; these are all internal chunks \nused by plated code. The user should not be creating any chunks whose \nnames begin with an underscore. Also none of these chunks should ever \nbubble down through the heirachy, they belong only to the page in \nwhich they are created..</p>\n<p>A new object full of only chunks that do not begin with an underscore \nis returned.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 387,
   "name": "js.plated_chunks.remove_underscorechunks",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>value = plated_chunks.replace(str,dat)</code></pre><p>Repeatedly call replace_once until all things that can expand, have \nexpanded, or we ran out of sanity. Sanity is 100 levels of recursion, \njust to be on the safe side.</p>\n<p>We then call a final replace_once with the lastpass flag set.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 815,
   "name": "js.plated_chunks.replace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>chunks = plated_chunks.replace_once(str,dat,lastpass)</code></pre><p>Parse the str and replace {} values once only using dat values. \nlastpass is a flag as on the lastpass we allow final expansion and removal.</p>\n<p>We can use {[} {]} around areas of text to prevent further expansion \ninside. So we can talk about plated inside plated, this is necesary for \nour documentation.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 547,
   "name": "js.plated_chunks.replace_once",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>plated_chunks.reset_namespace()</code></pre><p>clear the namespace, a namespace is a list of chunks that will be \nmerged together as we descend into directories. The lower or later \nchunks replacing or merging with the previous ones.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 328,
   "name": "js.plated_chunks.reset_namespace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<pre><code>plated_chunks.set_namespace(values)</code></pre><p>Set the namespace to the given value.</p>\n",
   "count": 1,
   "file": "../js/plated_chunks.js",
   "line": 343,
   "name": "js.plated_chunks.set_namespace",
   "url": "../js/plated_chunks.js"
  },
  {
   "body": "<p>Manage the files that we read from and watch or write to.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_files = require(&quot;./plated_files.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturn value is made available in plated.chunks note that all of these \nmodules are bound together and operate as a group with shared data.</p>\n<p>In the future when we talk about this module and its available \nfunctions we are referring to the return value from this create \nfunction.</p>\n",
   "count": 25,
   "file": "../js/plated_files.js",
   "line": 3,
   "name": "js.plated_files",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>chunks = await plated_files.base_files_to_chunks(fname)</code></pre><p>Check this directory and all directories above for generic chunks build \nall of these into the current chunk namespace for this file.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 533,
   "name": "js.plated_files.base_files_to_chunks",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.build()</code></pre><p>Build all files found in the source dir into the output dir.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 612,
   "name": "js.plated_files.build",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.build_file(fname)</code></pre><p>Build the given source filename, using chunks or maybe just a raw copy \nfrom source into the output.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 565,
   "name": "js.plated_files.build_file",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.empty_cache()</code></pre><p>Empty the current file cache, we fill it up as read files.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 466,
   "name": "js.plated_files.empty_cache",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.empty_folder(path)</code></pre><p>Empty the (output) folder or make it if it does not exist. This is \nrather dangerous so please be careful.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 373,
   "name": "js.plated_files.empty_folder",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>await plated_files.exists(path)</code></pre><p>Returns true if a file or dir at the given path exists.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 94,
   "name": "js.plated_files.exists",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>chunks = plated_files.file_to_chunks(root,fname,chunks)</code></pre><p>Load root/fname or get it from the cache and then turn it into chunks \nusing plated_chunks.fill_chunks(date,chunks) chunks is returned.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 479,
   "name": "js.plated_files.file_to_chunks",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>filename = plated_files.filename_fixup(filename)</code></pre><p>Fix the filename, so it becomes an empty string rather than a &quot;.&quot; or \n&quot;/.&quot; or &quot;/&quot; this makes it easier to use in urls.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 264,
   "name": "js.plated_files.filename_fixup",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>bool = plated_files.filename_is_basechunk(filename)</code></pre><p>Is this filename part of the basechunks for a dir?</p>\n<p>A base chunk is something like ^.html or ^.css all of these files get \nmerged into the base chunks for the directory they are found in. Their \nextension is ignored and just to help syntax highlighting when the file \nis viewed.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 307,
   "name": "js.plated_files.filename_is_basechunk",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>bool = plated_files.filename_is_plated(filename)</code></pre><p>Is this filename something we need to run through plated. Returns true \nif filename contains the ^ trigger string. This string can be changed \nby altering opts.hashfile from &quot;^&quot; to something else.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 330,
   "name": "js.plated_files.filename_is_plated",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>dirname = plated_files.filename_to_dirname(filename)</code></pre><p>Get the dirname of this filename.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 280,
   "name": "js.plated_files.filename_to_dirname",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>filename = plated_files.filename_to_output(filename)</code></pre><p>Work out the output filename from an input filename, the trigger string \n&quot;^.&quot; gets removed as we process a file.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 350,
   "name": "js.plated_files.filename_to_output",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.find_dirs(root,name,func)</code></pre><p>Call func(name) with every directory we find inside the root/name \ndirectory. We follow symlinks into other directories.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 440,
   "name": "js.plated_files.find_dirs",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.find_files(root,name)</code></pre><p>REturn an array with every file we find inside the root/name directory. \nWe follow symlinks into other directories.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 413,
   "name": "js.plated_files.find_files",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>await plated_files.joinpath(...)</code></pre><p>join components into a full path.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 79,
   "name": "js.plated_files.joinpath",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>await plated_files.lstat(path)</code></pre><p>Return the lstat of this path</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 126,
   "name": "js.plated_files.lstat",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.mkdir(dir)</code></pre><p>Fill in _source and related chunks such as.</p>\n<p>_sourcename the file that this set of chunks came from.</p>\n<p>_filename the output filename.</p>\n<p>_dirname the output dirname.</p>\n<p>_root the root of the site, normally a relative path to the current \ndirectory, eg ../ since some things such as github pages need to exist \nin a directory rather than the root of a site. This should always be \nused in html paths, {_root} instead of / to make sure that you always \nget to the right place and can find your files.</p>\n<p>_filename the url path of the filename, eg /dirname/filename</p>\n<p>_dirname the url path of the dir this file exists in, eg /dirname</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 182,
   "name": "js.plated_files.mkdir",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.prepare_namespace(fname)</code></pre><p>Check this directory and all directories above for generic chunks then \nbuild all of these into the current chunk namespace for this file.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 502,
   "name": "js.plated_files.prepare_namespace",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>await plated_files.readdir(path)</code></pre><p>Return the readdir of this path</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 140,
   "name": "js.plated_files.readdir",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>filename = plated_files.source_to_output(filename)</code></pre><p>Convert a source path into an output path.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 293,
   "name": "js.plated_files.source_to_output",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>await plated_files.stat(path)</code></pre><p>Return the stat of this path</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 112,
   "name": "js.plated_files.stat",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.trimpath(path)</code></pre><p>Remove a trailing / from the path</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 58,
   "name": "js.plated_files.trimpath",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.watch()</code></pre><p>Build all files found in the source dir into the output dir and then \nsit watching for changes to these files that would trigger rebuilds.</p>\n<p>This does not return, instead the user is expected to ctrl+c when \nfinished.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 676,
   "name": "js.plated_files.watch",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<pre><code>plated_files.write(filename,data)</code></pre><p>Create parent dir if necessary and write the data into this file.</p>\n",
   "count": 1,
   "file": "../js/plated_files.js",
   "line": 250,
   "name": "js.plated_files.write",
   "url": "../js/plated_files.js"
  },
  {
   "body": "<p>Manage the chunks of text that are combined into a page.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_output = require(&quot;./plated_output.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturn value is made available in plated.chunks note that all of these \nmodules are bound together and operate as a group with shared data.</p>\n<p>In the future when we talk about this module and its available \nfunctions we are referring to the return value from this create \nfunction.</p>\n",
   "count": 5,
   "file": "../js/plated_output.js",
   "line": 3,
   "name": "js.plated_output",
   "url": "../js/plated_output.js"
  },
  {
   "body": "<pre><code>chunks = plated_output.remember(chunks)</code></pre><p>Remember this page, the name is expected to be found in \nchunks._output_filename and this is used as the key to store these \nchunks.</p>\n",
   "count": 1,
   "file": "../js/plated_output.js",
   "line": 37,
   "name": "js.plated_output.remember",
   "url": "../js/plated_output.js"
  },
  {
   "body": "<pre><code>chunks = await plated_output.remember_and_write(chunks)</code></pre><p>The same as remember but also instantly write out the chunks using \nplated_output.write</p>\n",
   "count": 1,
   "file": "../js/plated_output.js",
   "line": 53,
   "name": "js.plated_output.remember_and_write",
   "url": "../js/plated_output.js"
  },
  {
   "body": "<pre><code>await plated_output.write(chunks)</code></pre><p>Write out the chunks to to _output_filename as its final page like \nform. chunks._output_chunkname is the name of the chunk that we intend \nto render into this page, eg &quot;html&quot; </p>\n<p>opts.output is the directory we are going to write the file into.</p>\n<p>If the opts.dumpjson flag is set then we also output a \n.json file which contains the chunks used to construct this page.</p>\n",
   "count": 1,
   "file": "../js/plated_output.js",
   "line": 69,
   "name": "js.plated_output.write",
   "url": "../js/plated_output.js"
  },
  {
   "body": "<pre><code>plated_output.write_all()</code></pre><p>Go through all the remembered chunks and write each one out using \nplated_output.write</p>\n",
   "count": 1,
   "file": "../js/plated_output.js",
   "line": 109,
   "name": "js.plated_output.write_all",
   "url": "../js/plated_output.js"
  },
  {
   "body": "",
   "count": 16,
   "name": "js.plated_plugin"
  },
  {
   "body": "<p>A blog plugin.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_plugin_blog = require(&quot;./plated_plugin_blog.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturned plugin functions are added to the plugin call stack. Note that \nall of these modules are bound together and operate as a group with \nshared data.</p>\n",
   "count": 3,
   "file": "../js/plated_plugin_blog.js",
   "line": 3,
   "name": "js.plated_plugin.blog",
   "url": "../js/plated_plugin_blog.js"
  },
  {
   "body": "<pre><code>dirs = plated_plugin_blog.process_dirs(dirs)</code></pre><p>Tweak all the base chunks grouped by dir name and pre cascaded/merged</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_blog.js",
   "line": 147,
   "name": "js.plated_plugin.blog.process_dirs",
   "url": "../js/plated_plugin_blog.js"
  },
  {
   "body": "<pre><code>chunks = plated_plugin_blog.process_file(chunks)</code></pre><p>Tweak a single file of chunks, only chunks found in this file will be available.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_blog.js",
   "line": 387,
   "name": "js.plated_plugin.blog.process_file",
   "url": "../js/plated_plugin_blog.js"
  },
  {
   "body": "<p>A blog plugin.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_plugin_copy = require(&quot;./plated_plugin_copy.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturned plugin functions are added to the plugin call stack. Note that \nall of these modules are bound together and operate as a group with \nshared data.</p>\n<p>This plugin is intended to duplicate part of a site into another \ndirectory with possibly tweaked chunks, this is primarily intended for \ntext translations. We produce for instance pure text chunks containing \njust english text and replace these chunks with french versions inside \na fra directory.</p>\n<p>Note that we only copy chunkfiles not all data files, so this is \nonly about duplicating files that are rendered from chunks.</p>\n",
   "count": 4,
   "file": "../js/plated_plugin_copy.js",
   "line": 4,
   "name": "js.plated_plugin.copy",
   "url": "../js/plated_plugin_copy.js"
  },
  {
   "body": "<pre><code>dirs = plated_plugin_copy.process_dirs(dirs)</code></pre><p>Remember all the _copy_json chunks we can find inside our \nplated_plugin_copy.chunks array. This will be used later to \nreplicated output into other locations with slight chunk tweaks.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_copy.js",
   "line": 87,
   "name": "js.plated_plugin.copy.process_dirs",
   "url": "../js/plated_plugin_copy.js"
  },
  {
   "body": "<pre><code>chunks = plated_plugin_copy.process_file(chunks)</code></pre><p>Auto magically parse _copy_json chunks as json.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_copy.js",
   "line": 113,
   "name": "js.plated_plugin.copy.process_file",
   "url": "../js/plated_plugin_copy.js"
  },
  {
   "body": "<pre><code>plated_plugin_copy.process_output(chunks)</code></pre><p>Compare this output file with cached copy chunks and duplicate it \ninto these directories with slightly tweaked chunks if it matches.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_copy.js",
   "line": 136,
   "name": "js.plated_plugin.copy.process_output",
   "url": "../js/plated_plugin_copy.js"
  },
  {
   "body": "<p>A docs plugin.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_plugin_docs = require(&quot;./plated_plugin_docs.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturned plugin functions are added to the plugin call stack. Note that \nall of these modules are bound together and operate as a group with \nshared data.</p>\n",
   "count": 3,
   "file": "../js/plated_plugin_docs.js",
   "line": 3,
   "name": "js.plated_plugin.docs",
   "url": "../js/plated_plugin_docs.js"
  },
  {
   "body": "<pre><code>dirs = plated_plugin_docs.process_dirs(dirs)</code></pre><p>Tweak all the base chunks grouped by dir name and pre cascaded/merged</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_docs.js",
   "line": 93,
   "name": "js.plated_plugin.docs.process_dirs",
   "url": "../js/plated_plugin_docs.js"
  },
  {
   "body": "<pre><code>chunks = plated_plugin_docs.process_file(chunks)</code></pre><p>Tweak a single file of chunks, only chunks found in this file will be available.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_docs.js",
   "line": 300,
   "name": "js.plated_plugin.docs.process_file",
   "url": "../js/plated_plugin_docs.js"
  },
  {
   "body": "<p>A way of importing chunks from another page.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_plugin_import = require(&quot;./plated_plugin_import.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturned plugin functions are added to the plugin call stack. Note that \nall of these modules are bound together and operate as a group with \nshared data.</p>\n",
   "count": 2,
   "file": "../js/plated_plugin_import.js",
   "line": 4,
   "name": "js.plated_plugin.import",
   "url": "../js/plated_plugin_import.js"
  },
  {
   "body": "<pre><code>chunks = plated_plugin_import.process_file(chunks)</code></pre><p>Tweak a single file of chunks, only chunks found in this file will be \navailable.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_import.js",
   "line": 49,
   "name": "js.plated_plugin.import.process_file",
   "url": "../js/plated_plugin_import.js"
  },
  {
   "body": "<p>A blog plugin.</p>\n<p>This module only exposes one function, which is used to create \nthe actual module with bound state data.</p>\n<pre><code>plated_plugin_redirect = require(&quot;./plated_plugin_redirect.js&quot;).create(opts,plated)</code></pre><p>This is called automatically when the plated module is created and the \nreturned plugin functions are added to the plugin call stack. Note that \nall of these modules are bound together and operate as a group with \nshared data.</p>\n",
   "count": 3,
   "file": "../js/plated_plugin_redirect.js",
   "line": 4,
   "name": "js.plated_plugin.redirect",
   "url": "../js/plated_plugin_redirect.js"
  },
  {
   "body": "<pre><code>dirs = plated_plugin_redirect.process_dirs(dirs)</code></pre><p>Tweak all the base chunks grouped by dir name and pre cascaded/merged</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_redirect.js",
   "line": 105,
   "name": "js.plated_plugin.redirect.process_dirs",
   "url": "../js/plated_plugin_redirect.js"
  },
  {
   "body": "<pre><code>chunks = plated_plugin_redirect.process_file(chunks)</code></pre><p>Tweak a single file of chunks, only chunks found in this file will be \navailable.</p>\n<pre><code>#^_redirect_json</code></pre><p>Is a special chunk name that we will parse as json and contain \nconfiguration data to setup redirects.</p>\n",
   "count": 1,
   "file": "../js/plated_plugin_redirect.js",
   "line": 151,
   "name": "js.plated_plugin.redirect.process_file",
   "url": "../js/plated_plugin_redirect.js"
  }
 ],
 "_output_chunkname": "html",
 "_output_filename": "docs/js/index.html",
 "_root": "../../",
 "_site": "{_root}",
 "_sourcename": "docs/js/index.html",
 "body": "<div class=\"default\">\n\t<div class=\"contents\">\n\t\t<div class=\"topics\">\n\t\t\t<a class=\"par\" href=\"{_docs_json.dirname}\"><span>/</span></a>\n\t\t\t{_docs:menuwrap}\n\t\t</div>\n\t</div>\n\t<div class=\"main\">\n\t\t{_list:wrap}\n\t</div>\n</div>\n",
 "content": "<div class=\"content\">{nav}{body}</div>\n",
 "css": "\n/*\n\n\tVariables:\n\t\n\t------------------------------------------------------------------\n\tThe bright highlight used for the logo and links on hover\n\t------------------------------------------------------------------\n\t\n\tbase \t\t\t- Blue\t\t\t\t|\tLogo\n\tbase_alt \t\t- Light blue\t\t|\tLink hover\n\t\n\t------------------------------------------------------------------\n\tBasic colours for background and fonts\n\t------------------------------------------------------------------\n\t\n\tbase_back\t\t- Off white\t\t\t|\tMain body background\n\tbase_back_alt \t- Dark white\t\t|\tDocs column background\n\tbase_back_code\t- Dark blue grey\t|\tCode background\n\tbase_link\t\t- Medium grey\t\t|\tLink\n\tbase_font\t\t- Dark grey\t\t\t|\tBody font\n\tbase_code\t\t- White\t\t\t\t|\tCode font\n\tbase_src\t\t- Light grey\t\t|\tSource link background\n\t\n\t------------------------------------------------------------------\n\tExtra bits\n\t------------------------------------------------------------------\n\t\n\twhite \t\t\t- White\t\t\t\t|\tNavigation bar\n\thr\t\t \t\t- Blue\t\t\t\t|\tHorizontal line\n\n*/\n\n:root {\n  --base:#1400ff;\n  --base_alt:#3F2FFF;\n  --base_back:#f7f4fd;\n  --base_back_alt:#efefef;\n  --base_back_code:#282a36;\n  --base_link:#666;\n  --base_font:#484848;\n  --base_code:#fff;\n  --base_src:#d8d8d8;\n  --white:#fff;\n  --hr:#1400ff;\n}\n\n\n/*\n\n\tReset & base css\n\t\n\tbody\t|\t100vh - Avoid the IE 10-11 `min-height` bug.\n\n*/\n\n*{box-sizing:border-box; -webkit-box-sizing:border-box; -moz-box-sizing:border-box; -o-box-sizing:border-box; -ms-box-sizing:border-box;}\n\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:top;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}\n\na,img\t\t{border:0; outline:none;}textarea:focus,input:focus{outline:0;}*:focus{outline:0;}\nbody, html\t{-webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; min-width:100%; min-height:100%; width:100%; height:100%; height:100vh; margin:0 auto;}\n\n\n/*\n\n\tMain styles for the entire site\n\t\n\ta\t\t|\tTransition css animations\n\n*/\n\nbody \t{background-color:var(--base_back); color:var(--base_font); display:flex; flex-direction:column; font-family:Arial, sans-serif; font-size:13px; line-height:18px; position:relative; padding-top:4em;}\n\na\t\t{-webkit-transition:all .2s ease-in-out; -moz-transition:all .2s ease-in-out; -o-transition:all .2s ease-in-out; -ms-transition:all .2s ease-in-out; transition:all .2s ease-in-out;}\n\na \t\t{color:var(--base_font); text-decoration:none;}\na:hover {color:var(--base); cursor:pointer;}\na img \t{border:none;}\n\nh1 \t\t{font-size:30px; margin-bottom:26px;}\nh1 a\t{font-weight:bold;}\nh2 \t\t{font-size:24px;}\nh3 \t\t{font-size:18px;}\nh4 \t\t{font-size:16px;}\nh5 \t\t{font-size:14px;}\nh6 \t\t{font-size:13px;}\n\nb\t\t{font-weight:bold;}\np \t\t{font-size:19px; line-height:31px; margin-bottom:16px;}\nstrong\t{font-weight:bold;}\n\n.line, hr\t\t\t{border-top:1px dashed var(--hr); margin-top:40px; margin-bottom:20px; position:relative;}\n\nblockquote \t\t\t{font-family:georgia,serif; font-style:italic; padding:13px 13px 21px 15px; margin-bottom:18px;}\nblockquote:before\t{color:#eee; content:\"\\201C\"; font-family:georgia,serif; font-size:40px; margin-left:-10px;}\nblockquote p \t\t{font-size:14px; font-style:italic; font-weight:300; line-height:18px; margin-bottom:0;}\n\ncode, pre \t\t\t{color:var(--base_code); font-family:monospace;}\ncode\t\t\t\t{background:var(--base_back_code);  border-radius:3px; -webkit-border-radius:3px; -moz-border-radius:3px; font-size:12px; padding:1px 3px;}\npre\t\t\t\t\t{background-color:var(--base_back_code); border-radius:6px; font-size:11px; line-height:16px; margin:32px 0 18px 0; padding:14px; white-space:pre-wrap; word-wrap:break-word; }\npre:first-of-type\t{margin-top:0;}\npre code \t\t\t{background:transparent; font-size:14px; line-height:26px; padding:0;}\nsup \t\t\t\t{font-size:0.83em; line-height:0; vertical-align:super;}\n\n\n/*\n\n\tWrappers:\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tcontent\t\t\t|\tFlex = *\n\tdefault \t\t|\tClean default div, used only in Docs body\n\tnav_wrap \t\t|\tNavigation bar for entire site\n\tright \t\t\t|\tClass for text-align right\n\n*/\n\n.content\t{flex:1 0 auto;}\n.default\t{margin:0 auto;}\n.nav_wrap\t{background-color:var(--white); left:0; padding:1.5em 3em; position:fixed; top:0; width:100%; z-index:100;}\n.right\t\t{text-align:right;}\n\n\n/*\n\n\tNavigation bar:\n\t\n\tThe main navigation bar is made up of a wrapper div that holds the\n\tmain logo link and an unordered list of all the other pages.\n\t\n\tnav\t\t \t\t|\tMain div for logo and links\n\tnav ul\t \t\t|\tListing of links\n\tnav a \t\t\t|\tLinks with padding\n\n*/\n\n.nav\t\t{align-items:center; display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; -moz-box-align:center; -ms-box-align:center; -webkit-box-align:center;}\n.nav ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:flex-end; width:100%;}\n.nav a\t\t{color:var(--base_link); font-size:1.5em; margin:0 1rem;}\n.nav a:hover{color:var(--base);}\n\n\n/*\t\n\n\tLogo:\n\t\n\t'Patua One' is only used here - @import found in ^.html\n\t\n\tlogo\t \t\t|\tSplash page logo\n\tlogo p\t \t\t|\tSplash page about div\n\tnav a.logo \t\t|\tLogo in navigation bar\n\t\n*/\n\n.logo\t\t{color:var(--base); font-family:'Patua One',georgia,serif;}\n.logo p\t\t{color:var(--base_font); font-size:5em; line-height:0.8em;}\n.nav a.logo {color:var(--base); display:block; font-size:1.8em;}\n\n\n/*\n\n\tInstall:\n\t\n\tInstallation instructions on the splash page\n\t\n\tinstall \t\t|\tMain wrapper\n\tinstall div\t\t|\tWrapper for installation divs\n\tinstall code\t|\tBigger fonts for code div\n\t\n*/\n\n.install \t\t\t\t\t{display:flex; justify-content:space-evenly; margin-top:2em; width:100%;}\n.install div\t\t\t\t{padding-left:5%; width:60%;}\n.install div:nth-of-type(1) {padding:0; width:40%;}\n.install.full div\t\t\t{width:100%;}\n.install code \t\t\t\t{font-size:1.6em;}\n\n\n/*\n\n\tBlog:\n\t\n\tblog_info \t\t|\tBlog author & date info\n\tblog_wrap \t\t|\tWrapper for a blog post\n\tblog_wrap a\t\t|\tFix long urls with these rules\n\tpaging_wrap\t\t|\tWrapper for paging links\n\t\n*/\n\n\n.blog_info\t\t{font-size:70%; position:absolute; right:10px; top:2.5em; background-color:#e7e1f5; padding:0 20px;}\n\n.blog_wrap\t\t{color:var(--base_font); font-family:sans-serif; font-size:20px; line-height:33px; margin:auto; padding:4em 0; position:relative; width:740px;}\n.blog_wrap h2\t{font-family:'Patua One',georgia,serif; font-size:2.5em; line-height:1em; padding-bottom:1em;}\n.blog_wrap a\t{overflow-wrap:break-word; word-wrap:break-word; word-break:break-word; -ms-hyphens:auto; -moz-hyphens:auto; -webkit-hyphens:auto; hyphens:auto;}\n.blog_wrap a \t{color:var(--base); text-decoration:none;}\n.blog_wrap a:hover {color:var(--base_alt); cursor:pointer;}\n\n.paging_wrap\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; margin-top:5em;}\n.paging_wrap a\t{font-size:80%; display:block;}\n\n\n/*\n\n\tFooter:\n\t\n\tSticky footer with flexbox\n\t\n\thttps://css-tricks.com/couple-takes-sticky-footer/\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tfooter\t \t\t|\tFlex = *\n\tfooter ul \t\t|\tFooter links\n\t\n*/\n\n.footer\t\t\t{flex-shrink:0; padding:2em 4em;}\n.footer ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; width:100%;}\n\n\n/*\n\n\tMedia queries\n\t\n\tmain\t\t\t|\tWrapper for documentation page\n\tcontents\t\t|\tWrapper for documentation table of contents\n\t\n*/\n\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\nonly screen and (-o-min-device-pixel-ratio: 3/2),\nonly screen and (min--moz-device-pixel-ratio: 1.5),\nonly screen and (min-device-pixel-ratio: 1.5) {\n\n\tbody\t\t\t{padding-top:7em;}\n\t.nav_wrap\t\t{padding:3em;}\n\t.nav\t\t\t{font-size:1.5em;}\n\t.blog_info\t\t{font-size:1em;}\n\t.blog_wrap h2\t{font-size:3em;}\n\tp \t\t\t\t{font-size:1.5em; line-height:1.5em; margin-bottom:1.5em;}\n\t.footer\t\t\t{font-size:1.5em;}\n\t.paging_wrap\t{font-size:1.5em;}\n\t\n\t.main\t\t\t{max-width:initial;}\n\t.contents\t\t{top:5.5em;}\n\n}\n",
 "foot": "<div class=\"footer\">\n\t<ul>\n\t\t<li>Hosted with Github pages</li>\n\t\t<li><a href=\"#\">^.^</a></li>\n\t\t<li><a href=\"https://github.com/xriss/plated/blob/master/LICENSE\">2018 MIT License</a></li>\n\t</ul>\n</div>\n",
 "head": "<title>{title}</title>\n<meta name=\"theme-color\" content=\"#2a3133\">\n<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n<style>\n{css}\n</style>",
 "html": "<html>\n\t<head>\n\t\t<title>{title}</title>\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n\t\t<link rel='stylesheet' href='{_docs_json.dirname}/docs.css' />\n\t</head>\n\t<body>{nav}{body}</body>\n</html>\n",
 "menuwrap": "{_it:menuwrap_link}",
 "menuwrap_link": "{_it.count>1&&_it:menuwrap_link2}\n{_it.count==1&&_it:menuwrap_link1}",
 "menuwrap_link1": "<a class=\"sub\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "menuwrap_link2": "<a class=\"par\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "nav": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">\n\t\t<a href=\"{_root}\" class=\"logo\">plated^</a>\n\t\t<ul>\n\t\t\t<li><a href=\"https://github.com/xriss/plated\">Github</a></li>\n\t\t\t<li><a href=\"{_root}blog\">Blog</a></li>\n\t\t\t<li><a href=\"{_root}docs\">Documentation</a></li>\n\t\t</ul>\n\t</div>\n</div>\n",
 "title": "Plated^ docs!",
 "wrap": "\n<div class=\"wrap\">\n<h1><a href=\"{_docs_json.dirname}/{_it.name}\">{_it.name}</a></h1>\n<div class=\"source\"><a href=\"{_it.url}#L{_it.line}\">{_it.url}</a></div>\n<div>{[[}{_it.body}{]]}</div>\n</div>\n"
}